{"input":"Nodejs","moduleOverview":"In this tutorial, we will learn about Node.js, an open-source, cross-platform JavaScript runtime environment that allows developers to run JavaScript code outside of a web browser.","learningObjectives":["Understand what Node.js is and its features","Learn how to install Node.js","Explore the core modules and built-in functionalities of Node.js","Discover the Node Package Manager (npm)","Get familiar with asynchronous programming in Node.js"],"prerequisites":["Basic understanding of JavaScript","Familiarity with web development concepts"],"introduction":[{"heading":"What is Node.js?","paragraph":"Node.js is a runtime environment that executes JavaScript code outside of a web browser. It is built on Chrome's V8 JavaScript engine and allows developers to run JavaScript on the server-side. Unlike traditional JavaScript, which runs in a browser, Node.js enables developers to create scalable network applications and perform server-side scripting. Node.js uses an event-driven, non-blocking I/O model, making it efficient and lightweight."},{"heading":"Features of Node.js","paragraph":"Node.js provides several features that make it a popular choice among developers:","imgUrl":"https://example.com/nodejs-features.png","headingNumber":2},{"heading":"Installing Node.js","paragraph":"To install Node.js, follow these steps:","imgUrl":"","headingNumber":3},{"heading":"Core Modules and Built-in Functionalities","paragraph":"Node.js comes with a set of built-in modules that provide various functionalities. Some of the core modules include:","imgUrl":"","headingNumber":4},{"heading":"Node Package Manager (npm)","paragraph":"npm is the package manager for Node.js. It allows developers to easily install, publish, and manage third-party packages and dependencies for their Node.js projects. npm provides a command-line interface for managing packages and is bundled with Node.js installation.","imgUrl":"","headingNumber":5},{"heading":"Asynchronous Programming in Node.js","paragraph":"Node.js is known for its asynchronous programming model, which allows it to handle multiple requests efficiently. By using callbacks, promises, or async/await, developers can write non-blocking code and handle events more effectively.","imgUrl":"","headingNumber":6}],"exampleCode":{"beforeCodeExplanation":"Here's an example of a simple Node.js server:","code":{"languageName":"JavaScript","code":["const http = require('http');","","const server = http.createServer((req, res) => {","  res.statusCode = 200;","  res.setHeader('Content-Type', 'text/plain');","  res.end('Hello, world!');","});","","server.listen(3000, 'localhost', () => {","  console.log('Server running at http://localhost:3000/');","});"]},"afterCodeExplanation":"This code sets up a simple HTTP server using the built-in 'http' module. The server listens on port 3000 and responds with 'Hello, world!' for every request it receives."},"testYourKnowledge":{"question":"What is the purpose of Node.js?","options":["To run JavaScript code in a web browser","To execute JavaScript code on the server-side","To create scalable network applications","To manage third-party packages and dependencies"],"correctOption":"To execute JavaScript code on the server-side"},"sources":["https://nodejs.org/en/","https://www.npmjs.com/"]}